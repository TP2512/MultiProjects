To authenticate and generate tokens in FastAPI, you can use OAuth2 with JWT (JSON Web Tokens) authentication. Here's how you can implement it:

Install Dependencies:
First, you need to install the necessary dependencies:

css
Copy code
pip install fastapi[all] python-jose[cryptography] passlib[bcrypt]
Define User Model:
Define a Pydantic model representing your user.

Create Users Database:
Create a database to store user credentials. You can use an in-memory database, a relational database, or any other storage solution.

Generate JWT Token:
Implement a function to generate JWT tokens when a user successfully authenticates.

Implement Authentication Endpoints:
Create endpoints to handle user authentication and token generation.

Protect Endpoints:
Protect your endpoints using dependency injection to validate JWT tokens.

Here's a basic example of how to implement token-based authentication in FastAPI:

python
Copy code
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta
from typing import Optional

# Create FastAPI instance
app = FastAPI()

# Define secret key and token expiration time
SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Fake database for users
users_db = {
    "user1": {
        "username": "user1",
        "full_name": "User One",
        "email": "user1@example.com",
        "hashed_password": "$2b$12$7a9unMQ07xw8obHLOLj2OeRCL8GGPA1QvjtSyMDCU/ySbywJGft/W",
    }
}

# OAuth2PasswordBearer for token authentication
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# User model
class User(BaseModel):
    username: str
    email: Optional[str] = None
    full_name: Optional[str] = None
    disabled: Optional[bool] = None

# Token payload
class TokenData(BaseModel):
    username: str

# Verify password
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

# Authenticate user
def authenticate_user(username: str, password: str):
    user = users_db.get(username)
    if not user or not verify_password(password, user["hashed_password"]):
        return False
    return user

# Create access token
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# Get user from token
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return user

# Login endpoint
@app.post("/token")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"]}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

# Protected endpoint
@app.get("/users/me", response_model=User)
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
In this example:

We use OAuth2 with password flow for token authentication.
The login_for_access_token endpoint authenticates users and generates JWT tokens.
The read_users_me endpoint is protected with token authentication using the get_current_user dependency. Only authenticated users with valid tokens can access this endpoint.
We define helper functions to verify passwords, authenticate users, create JWT tokens, and get the current user from a token.
You need to replace "your_secret_key" with your actual secret key and "your_password" with your actual password for user authentication. Also, note that in a real-world scenario, you should use a secure password hashing algorithm and store hashed passwords in your database.